#include "dbUGLiRkReward.h"
#include "dbUILayer.h"
#include "dbUGRcNormal.h"
//=====================================================================================================
//
//
//
//=====================================================================================================
namespace db
{
	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	TUGLiRkReward::TUGLiRkReward(TUIGenLayer* player)
		: TUGLiGen(player)
	{
	}

	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	TUGLiRkReward::~TUGLiRkReward()
	{
	}


	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	TUGRcNormal* TUGLiRkReward::MakeObj_Record()
	{
		TUGRcNormal* newrecord = new TUGRcNormal(player_);
		s32 rh = newrecord->MakeGroup(slider_, 0, stList_.bottomy_, sliderx_, slidery_);
		GenMakeObj_Record(newrecord, rh);
		
		records_.push_back(newrecord);
		return newrecord;
	}

	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	s64 TUGLiRkReward::GetCommonID(void)
	{
		s64 ret = NGNUM;
		if (records_.size() > GetActIndex())
		{
			ret = records_[GetActIndex()]->GetCommonID();
		}
		return ret;
	}

	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	void TUGLiRkReward::DoUpdateSub(BOOL draw_f)
	{
	}

	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	void TUGLiRkReward::DoClearRecord()
	{
		for (s32 i = 0; i < records_.size(); ++i) Freemem(records_[i]);
		records_.clear();
	}

	//--------------------------------------------------------------------------------------------
	// 
	//--------------------------------------------------------------------------------------------
	void TUGLiRkReward::DoMakeGroupSub()
	{
	}
}
